{
  "layout": {
    "type": "column",
    "children": [
      {
        "label": "控件组",
        "type": "ctrlgroup",
        "source": "CTRLGROUP",
        "advance": {
          "expression": "expression = {\n  on: {\n    init: function (event) {\n      var target = event.target;\n      var global = event.global;\n      var dItem, kpi,startTime,endTime;\n      var duration=null;\n      target.getValue(\"global/resource\");\n      var success = function () {\n\n        var resource = target.getValue(\"global/resource\");\n        var ci = [resource.id]; // 设备 526443915616079\n        var modelId = [resource.modelId] // 获取modelId\n        var accessConfigValues = resource.physicalConfig.accessConfigs;\n        target.getAttrsByModelId(modelId, function (attrs) {\n          var MeasurePointLocate = attrs.find(function (elem) {\n            return elem.name == \"MeasurePointLocate\";\n          }) || {};\n          var triggerEvent = function () {\n            target.trigger(\"drawDiagnoseEchart\", {\n              ins: dItem,\n              kpi: kpi,\n              startTime:duration\n            })\n          }\n          var sourceValue = MeasurePointLocate.sourceValue || \"\";\n          sourceValue = sourceValue.split(\",\");\n          sourceValue = sourceValue.map(function (str) {\n            var regExp = /(S\\d+)\\:([^a-zA-Z<>/\\\"]*)\\,?/g;\n            var run = regExp.exec(str);\n            var ins = run[1]\n            str = run[2];\n            return {\n              id: ins,\n              label: str\n            };\n          })\n         \n          dItem = dItem || sourceValue[0];\n\n          var render = function () {\n            var subaccessConfigValues = [];\n            accessConfigValues.forEach(function(item) {\n              if (item.instance == dItem.id) {\n                  if (!kpi) kpi = item;\n                  subaccessConfigValues.push(item);\n              }\n            })\n            triggerEvent();\n            var ctrlGroups = [\n              [{\n                type: \"label\",\n                value: \"测点\",\n                class: \"col-md-1\",\n                style: {\n                  textAlign: \"center\"\n                }\n              }, {\n                type: \"select\",\n                value: dItem.id,\n                class: \"col-md-2\",\n                on: {\n                  change: function (elem) {\n                    dItem = elem.value;\n                    kpi = null;\n                    render();\n                  }\n                },\n                options: sourceValue,\n                format: {\n                  \"id\": \"id\",\n                  \"label\": \"label\"\n                }\n              }, {\n                type: \"label\",\n                value: \"参数\",\n                class: \"col-md-1\",\n                style: {\n                  textAlign: \"center\"\n                }\n              }, {\n                type: \"select\",\n                value: kpi.kpiId,\n                class: \"col-md-2\",\n                on: {\n                  change: function (elem) {\n                    kpi = elem.value;\n                    triggerEvent();\n                  }\n                },\n                options: subaccessConfigValues,\n                format: {\n                  \"id\": \"kpiId\",\n                  \"label\": \"kpiName\"\n                },\n              }, {\n              type: \"label\",\n              value: \"起始时间\",\n              class: \"col-md-1\",\n              style: {\n\n                textAlign: \"center\"\n              }\n            }, {\n              type: \"dateRangePicker\",\n              value: \"\",\n              class: \"col-md-3\",\n              on: {\n                change: function (elem) {\n                  console.log(elem);\n                  startTime = elem;\n                }\n              },\n            },{\n                type: \"button\",\n                class: \"col-md-1\",\n                btnclass: \"btn btn-primary\",\n                value: \"设备信息\",\n                btnStyle: {\n                  width: \"100%\",\n                },\n                on: {\n                  click: function (elem) {\n                    \n                  }\n                }\n              }, {\n                type: \"button\",\n                class: \"col-md-1\",\n                btnclass: \"btn btn-primary\",\n                value: \"添加依据\",\n                btnStyle: {\n                  width: \"100%\",\n                },\n                  on: {\n                  click: function (elem) {\n             \n                  }\n                }\n            \n              }]\n            ];\n            target.render(ctrlGroups);\n          };\n          render();\n        })\n      }\n      success();\n      target.on(\"tree_resourceChange\", function (node) {\n        success();\n      })\n    }\n  }\n}"
        },
        "style": {
          "margin": "5px",
          "font-size": "12px"
        },
        "help": "../pdf/ctrlgroup.pdf",
        "url": "images/map/map1.png"
      },
      {
        "label": "控制板1",
        "type": "block",
        "source": "BLOCK",
        "style": {
          "background-color": "",
          "margin-top": "10px",
          "margin-bottom": "10px"
        },
        "advance": {
          "expression": {}
        },
        "children": [
          {
            "type": "column",
            "col": 12,
            "children": []
          }
        ],
        "url": "images/map/map1.png"
      },
      {
        "label": "控制板1",
        "type": "block",
        "source": "BLOCK",
        "style": {
          "padding": "10px",
          "margin": "5px",
          "border": "0",
          "box-shadow": "0px 0px 0px 0px rgba(0,0,0,0)",
          "background-color": "rgba(250,250,250,0)"
        },
        "children": [
          {
            "type": "column",
            "col": 12,
            "children": [
              {
                "label": "控件组",
                "type": "ctrlgroup",
                "source": "CTRLGROUP",
                "advance": {
                  "expression": "expression = {\n  width : \"auto\",\n  on : {\n    init : function(event){\n      var target = event.target;\n      var global = event.global;\n      target.setValue(\"type\", 0);\n      target.setValue(\"x0\", undefined);\n      target.setValue(\"x1\", undefined);\n      var render = function(){\n          var x0 = target.getValue(\"x0\") || 0;\n          var y0 = target.getValue(\"y0\") || 0;\n          var x1 = target.getValue(\"x1\") || 0;\n          var y1 = target.getValue(\"y1\") || 0;\n          var ctrlGroups = [\n           [{\n               type : \"jquery\",\n               render : function(){\n                   var div = $(\"<div></div>\");\n                   div.width(25);\n                   div.height(10);\n                   div.css(\"background-color\", \"blue\");\n                   return div;\n               }\n           },{\n              type : \"label\",\n              value : \"X\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : x0,\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : y0,\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n               type : \"jquery\",\n               render : function(){\n                   var div = $(\"<div></div>\");\n                   div.width(25);\n                   div.height(10);\n                   div.css(\"margin-left\", \"50px\");\n                   div.css(\"background-color\", \"red\");\n                   return div;\n               }\n           },{\n              type : \"label\",\n              value : \"X\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : x1 || \"0.00\",\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : y1,\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"∆X\",\n              style : {\n                  \"margin-left\" : \"50px\",\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : (x1-x0).toFixed(2),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"∆Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : (y1-y0).toFixed(2),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\",\n                  \"margin-right\" : \"50px\"\n              }\n            }]\n          ];\n          target.render(ctrlGroups);\n      }\n      target.on(\"handleChange\", function(){\n          render();\n      })\n      render();\n    }\n  }\n}"
                },
                "style": {
                  "margin": "5px",
                  "font-size": "12px"
                },
                "help": "../pdf/ctrlgroup.pdf",
                "parameters": {}
              },
              {
                "label": "高级视图",
                "type": "advanceEchart",
                "source": "ADVANCEECHART",
                "advance": {
                  "expression": "express = {\n  on: {\n    init: function (event) {\n      var target = event.target;\n      var global = event.global;\n\n      // target.on(\"tree_resourceChange\", function (node) {\n      //     var ci = [node.resource.id]; // 设备\n      //     console.log(ci);\n      //     var ciNames = 530846711176067;\n      //     var kpi = [10020001];     //测点（指标）\n      //     var kpiNames = [\"温度\"];\n      //     var transformerType= \"ROW\";\n      //     var time = 0;\n      //     // 扩展参数\n      //     var extension = {\n      //         transformerType:\"ROW\",\n      //         startTime:\"1509608510266\",\n      //         endTime:\"1509608510266\",\n\n      //     };\n      //     var xAxis = [];\n\n      //     event.target.getKpiValueList(ci, kpi, time, function (returnData){\n      //         console.log(returnData)\n\n      //     },extension)\n\n      // })\n      var ci = [526443915616079];\n      var kpi = [10020001];     //测点（指标）\n      var kpiNames = [\"温度\"];\n      var transformerType = \"ROW\";\n      var time = 0;\n      // 扩展参数\n      var extension = {\n        transformerType: \"ROW\",\n        startTime: \"2017-11-04T09:25:12.770Z\",\n        endTime: \"2017-11-04T09:25:12.771Z\",\n        isRealTimeData:false\n      };\n      event.target.getKpiValueList(ci, kpi, time, function (returnData) {\n        console.log(returnData);\n       \n        var data = eval(returnData[0].value);\n        console.log(data);\n        var dataList = data[0];\n        var valueList = data[1];\n \n\n\n        var render = function (init, sub) {\n          console.log(\"init\", init, sub);\n          var type = target.getValue(\"type\") || 0;\n          var x0 = target.getValue(\"x0\") || 0;\n          var x1 = target.getValue(\"x1\") || 180;\n          if (type == 0) {\n            var markLine = undefined;\n            var markPoint = undefined;\n          } else if (type == 1) {\n            var markLine = {\n              animation: false,\n              symbol: 'none',\n              silent: false,\n              lineStyle: {\n                normal: {\n                  width: 1,\n                  color: \"#436fff\",\n                  type: 'solid'\n                }\n              },\n              label: {\n                normal: {\n                  show: true,\n                  position: 'end',\n                  formatter: function (elem) {\n                    return elem.data.value + \"Hz\";\n                  }\n                }\n              },\n              data: (function () {\n                var rs = [];\n                for (i = 0; i < 10; i++) {\n                  var item = {\n                    xAxis: x0 * (i + 2) + ''\n                  };\n                  rs.push(item)\n                }\n                /**\n                 for(var i = 0; i < 10; i++){\n                  rs.push({\n                    xAxis : i * x0\n                  })\n                };*/\n                return rs;\n              })()\n            }\n            var markPoint = {\n              symbol: \"circle\",\n              symbolSize: 8,\n              animation: false,\n              silent: false,\n              label: {\n                normal: {\n                  show: false\n                  //                        formatter: '{b}: {d}'\n                }\n              },\n              itemStyle: {\n                normal: {\n                  color: \"#fff\",\n                  borderColor: \"blue\"\n                }\n              },\n              data: (function () {\n                var rs = [];\n                for (i = 0; i < 10; i++) {\n                  var yData = data[x0 / 1 * (i + 2)];\n                  if (yData) {\n                    var item = {\n                      xAxis: x0 * (i + 2) + '',\n                      yAxis: yData[1]\n                    };\n                    rs.push(item)\n                  }\n                }\n                /**\n                 for(var i = 0; i < 10; i++){\n                  rs.push({\n                      xAxis : i * x0,\n                      yAxis : valueList[i * x0]\n                  })\n                };*/\n                return rs;\n              })()\n            }\n          } else if (type == 2) {\n            var markLine = {\n              animation: false,\n              symbol: 'none',\n              silent: false,\n              lineStyle: {\n                normal: {\n                  color: \"red\",\n                  type: 'solid'\n                }\n              },\n              label: {\n                normal: {\n                  show: true,\n                  position: 'end',\n                  formatter: function (elem) {\n                    return elem.data.value + \"Hz\";\n                  }\n                }\n              },\n              data: (function () {\n                var rs = [];\n                for (var i = -5; i < 5; i++) {\n                  rs.push({\n                    xAxis: parseInt(x1) + i * (parseInt(x0) - parseInt(x1))\n                  })\n                }\n                ;\n                return rs;\n              })()\n            };\n            var markPoint = {\n              symbol: \"circle\",\n              symbolSize: 8,\n              animation: false,\n              silent: false,\n              label: {\n                normal: {\n                  show: false\n                }\n              },\n              itemStyle: {\n                normal: {\n                  color: \"#fff\",\n                  borderColor: \"red\"\n                }\n              },\n              data: (function () {\n                var rs = [];\n                for (var i = -5; i < 5; i++) {\n                  rs.push({\n                    xAxis: parseInt(x1) + i * (parseInt(x0) - parseInt(x1)),\n                    yAxis: valueList[parseInt(x1) + i * (parseInt(x0) - parseInt(x1))]\n                  })\n                }\n                ;\n                return rs;\n              })()\n            }\n          }\n          ;\n          var option = {\n            grid: [{\n              \"top\": \"10%\",\n              \"width\": \"90%\",\n              \"left\": \"5%\",\n              \"height\": \"65%\"\n            }, {\n              \"top\": \"10%\",\n              \"width\": \"90%\",\n              \"left\": \"5%\",\n              \"height\": \"65%\"\n            }],\n            tooltip: {\n              \"alwaysShowContent\": true,\n              triggerOn: 'none'\n            },\n            xAxis: [{\n              data: dataList,\n              axisPointer: {\n                label: {\n                  show: true,\n                  formatter: function (val) {\n                    console.log(\"a\", type);\n                    if (val.seriesData[0]) {\n                      target.setValue(\"x0\", val.value);\n                      target.setValue(\"y0\", val.seriesData[0].data);\n                      target.trigger(\"handleChange\");\n                      console.log(\"a--init\", init);\n                      if (type == 1) {\n                        if (init == false) {\n                          render();\n                        }\n                        ;\n                        init = false;\n                      }\n                      ;\n                    }\n                    return val.value\n                  }\n                },\n                lineStyle: {\n                  color: \"blue\",\n                  width: 2\n                },\n                handle: {\n                  show: true,\n                  size: 30,\n                  margin: 40,\n                },\n                \"value\": x0,\n                snap: false,\n              }\n            }, {\n              data: dataList,\n              axisPointer: {\n                label: {\n                  formatter: function (val) {\n                    if (val.seriesData[0]) {\n                      target.setValue(\"x1\", val.value)\n                      target.setValue(\"y1\", val.seriesData[0].data);\n                      target.trigger(\"handleChange\");\n                      if (type == 2) {\n                        if (init == false) {\n                          render();\n                        }\n                        ;\n                        init = false;\n                      }\n                      ;\n                    }\n                    return val.value\n                  }\n                },\n                lineStyle: {\n                  color: \"red\",\n                  width: 2\n                },\n                handle: {\n                  show: true,\n                  size: 30,\n                  margin: 40,\n\n                },\n                \"value\": x1,\n                snap: false,\n              },\n              gridIndex: 1\n            }],\n            yAxis: [{\n              splitLine: {show: true}\n\n            }, {\n              splitLine: {show: false},\n              gridIndex: 1\n            }],\n            dataZoom: [\n              {\n                show: true,\n                realtime: true,\n                start: 0,\n                end: 10,\n                xAxisIndex: [0, 1]\n              }\n            ],\n            series: [{\n              type: 'line',\n              showSymbol: false,\n              data: valueList,\n              markLine: markLine,\n              markPoint: markPoint\n            }, {\n              type: 'line',\n              showSymbol: false,\n              lineStyle: {\n                normal: {\n                  opacity: 0\n                }\n              },\n              data: valueList,\n              xAxisIndex: 1,\n              yAxisIndex: 1\n            }]\n          };\n          option\n          target.render(option);\n        };\n        render();\n        target.on(\"renderChart\", function () {\n          render(undefined, \"renderChart\");\n        })\n      }, extension)\n    }\n  }\n}"
                },
                "style": {
                  "margin": "auto",
                  "width": "100%",
                  "height": "500px"
                },
                "url": "images/map/map1.png",
                "parameters": {
                  "theme": "dark"
                }
              },
              {
                "label": "控件组",
                "type": "ctrlgroup",
                "source": "CTRLGROUP",
                "advance": {
                  "expression": "expression = {\n  on : {\n    init : function(event){\n      var target = event.target;\n      var global = event.global;\n      var ctrlGroups = [\n       [{\n          type : \"label\",\n          value : \"均值\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"平均幅值\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"有效值\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"方根幅值\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"波形指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        }],\n        [{\n          type : \"label\",\n          value : \"峭度指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"裕度指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"峰值指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"脉冲指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        },{\n          type : \"label\",\n          value : \"歪度指标\",\n        },{\n          type : \"label\",\n          value : \"XXX\",\n        }]\n      ];\n      event.target.render(ctrlGroups);\n    }\n  }\n}"
                },
                "style": {
                  "margin": "5px",
                  "font-size": "12px"
                },
                "help": "../pdf/ctrlgroup.pdf"
              }
            ]
          }
        ],
        "advance": {
          "expression": {}
        },
        "url": "images/map/map1.png"
      }
    ],
    "col": 12
  },
  "setting": {
    "showNavi": false,
    "style": {
      "padding": "15px"
    }
  }
}